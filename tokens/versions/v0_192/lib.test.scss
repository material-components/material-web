//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//
//
// !!! THIS FILE WAS AUTOMATICALLY GENERATED !!!
// !!! DO NOT MODIFY IT BY HAND !!!
//

@use 'true' as test;

@use './md-comp-assist-chip';
@use './md-comp-badge';
@use './md-comp-banner';
@use './md-comp-bottom-app-bar';
@use './md-comp-carousel-item';
@use './md-comp-checkbox';
@use './md-comp-circular-progress-indicator';
@use './md-comp-data-table';
@use './md-comp-date-input-modal';
@use './md-comp-date-picker-docked';
@use './md-comp-date-picker-modal';
@use './md-comp-dialog';
@use './md-comp-divider';
@use './md-comp-elevated-button';
@use './md-comp-elevated-card';
@use './md-comp-extended-fab-branded';
@use './md-comp-extended-fab-primary';
@use './md-comp-extended-fab-secondary';
@use './md-comp-extended-fab-surface';
@use './md-comp-extended-fab-tertiary';
@use './md-comp-fab-branded';
@use './md-comp-fab-branded-large';
@use './md-comp-fab-primary';
@use './md-comp-fab-primary-large';
@use './md-comp-fab-primary-small';
@use './md-comp-fab-secondary';
@use './md-comp-fab-secondary-large';
@use './md-comp-fab-secondary-small';
@use './md-comp-fab-surface';
@use './md-comp-fab-surface-large';
@use './md-comp-fab-surface-small';
@use './md-comp-fab-tertiary';
@use './md-comp-fab-tertiary-large';
@use './md-comp-fab-tertiary-small';
@use './md-comp-filled-autocomplete';
@use './md-comp-filled-button';
@use './md-comp-filled-card';
@use './md-comp-filled-icon-button';
@use './md-comp-filled-menu-button';
@use './md-comp-filled-select';
@use './md-comp-filled-text-field';
@use './md-comp-filled-tonal-button';
@use './md-comp-filled-tonal-icon-button';
@use './md-comp-filter-chip';
@use './md-comp-full-screen-dialog';
@use './md-comp-icon-button';
@use './md-comp-input-chip';
@use './md-comp-linear-progress-indicator';
@use './md-comp-list';
@use './md-comp-menu';
@use './md-comp-navigation-bar';
@use './md-comp-navigation-drawer';
@use './md-comp-navigation-rail';
@use './md-comp-outlined-autocomplete';
@use './md-comp-outlined-button';
@use './md-comp-outlined-card';
@use './md-comp-outlined-icon-button';
@use './md-comp-outlined-menu-button';
@use './md-comp-outlined-segmented-button';
@use './md-comp-outlined-select';
@use './md-comp-outlined-text-field';
@use './md-comp-plain-tooltip';
@use './md-comp-primary-navigation-tab';
@use './md-comp-radio-button';
@use './md-comp-rich-tooltip';
@use './md-comp-scrim';
@use './md-comp-search-bar';
@use './md-comp-search-view';
@use './md-comp-secondary-navigation-tab';
@use './md-comp-sheet-bottom';
@use './md-comp-sheet-floating';
@use './md-comp-sheet-side';
@use './md-comp-slider';
@use './md-comp-snackbar';
@use './md-comp-standard-menu-button';
@use './md-comp-suggestion-chip';
@use './md-comp-switch';
@use './md-comp-text-button';
@use './md-comp-time-input';
@use './md-comp-time-picker';
@use './md-comp-top-app-bar-large';
@use './md-comp-top-app-bar-medium';
@use './md-comp-top-app-bar-small';
@use './md-comp-top-app-bar-small-centered';
@use './md-ref-palette';
@use './md-ref-typeface';
@use './md-sys-color';
@use './md-sys-elevation';
@use './md-sys-motion';
@use './md-sys-shape';
@use './md-sys-state';
@use './md-sys-typescale';

@include test.describe('lib') {
  @include test.describe('md-comp-assist-chip.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-assist-chip.values());
    }
  }

  @include test.describe('md-comp-badge.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-badge.values());
    }
  }

  @include test.describe('md-comp-banner.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-banner.values());
    }
  }

  @include test.describe('md-comp-bottom-app-bar.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-bottom-app-bar.values());
    }
  }

  @include test.describe('md-comp-carousel-item.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-carousel-item.values());
    }
  }

  @include test.describe('md-comp-checkbox.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-checkbox.values());
    }
  }

  @include test.describe('md-comp-circular-progress-indicator.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-circular-progress-indicator.values());
    }
  }

  @include test.describe('md-comp-data-table.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-data-table.values());
    }
  }

  @include test.describe('md-comp-date-input-modal.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-date-input-modal.values());
    }
  }

  @include test.describe('md-comp-date-picker-docked.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-date-picker-docked.values());
    }
  }

  @include test.describe('md-comp-date-picker-modal.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-date-picker-modal.values());
    }
  }

  @include test.describe('md-comp-dialog.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-dialog.values());
    }
  }

  @include test.describe('md-comp-divider.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-divider.values());
    }
  }

  @include test.describe('md-comp-elevated-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-elevated-button.values());
    }
  }

  @include test.describe('md-comp-elevated-card.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-elevated-card.values());
    }
  }

  @include test.describe('md-comp-extended-fab-branded.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-extended-fab-branded.values());
    }
  }

  @include test.describe('md-comp-extended-fab-primary.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-extended-fab-primary.values());
    }
  }

  @include test.describe('md-comp-extended-fab-secondary.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-extended-fab-secondary.values());
    }
  }

  @include test.describe('md-comp-extended-fab-surface.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-extended-fab-surface.values());
    }
  }

  @include test.describe('md-comp-extended-fab-tertiary.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-extended-fab-tertiary.values());
    }
  }

  @include test.describe('md-comp-fab-branded.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-branded.values());
    }
  }

  @include test.describe('md-comp-fab-branded-large.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-branded-large.values());
    }
  }

  @include test.describe('md-comp-fab-primary.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-primary.values());
    }
  }

  @include test.describe('md-comp-fab-primary-large.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-primary-large.values());
    }
  }

  @include test.describe('md-comp-fab-primary-small.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-primary-small.values());
    }
  }

  @include test.describe('md-comp-fab-secondary.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-secondary.values());
    }
  }

  @include test.describe('md-comp-fab-secondary-large.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-secondary-large.values());
    }
  }

  @include test.describe('md-comp-fab-secondary-small.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-secondary-small.values());
    }
  }

  @include test.describe('md-comp-fab-surface.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-surface.values());
    }
  }

  @include test.describe('md-comp-fab-surface-large.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-surface-large.values());
    }
  }

  @include test.describe('md-comp-fab-surface-small.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-surface-small.values());
    }
  }

  @include test.describe('md-comp-fab-tertiary.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-tertiary.values());
    }
  }

  @include test.describe('md-comp-fab-tertiary-large.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-tertiary-large.values());
    }
  }

  @include test.describe('md-comp-fab-tertiary-small.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-fab-tertiary-small.values());
    }
  }

  @include test.describe('md-comp-filled-autocomplete.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-autocomplete.values());
    }
  }

  @include test.describe('md-comp-filled-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-button.values());
    }
  }

  @include test.describe('md-comp-filled-card.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-card.values());
    }
  }

  @include test.describe('md-comp-filled-icon-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-icon-button.values());
    }
  }

  @include test.describe('md-comp-filled-menu-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-menu-button.values());
    }
  }

  @include test.describe('md-comp-filled-select.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-select.values());
    }
  }

  @include test.describe('md-comp-filled-text-field.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-text-field.values());
    }
  }

  @include test.describe('md-comp-filled-tonal-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-tonal-button.values());
    }
  }

  @include test.describe('md-comp-filled-tonal-icon-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filled-tonal-icon-button.values());
    }
  }

  @include test.describe('md-comp-filter-chip.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-filter-chip.values());
    }
  }

  @include test.describe('md-comp-full-screen-dialog.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-full-screen-dialog.values());
    }
  }

  @include test.describe('md-comp-icon-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-icon-button.values());
    }
  }

  @include test.describe('md-comp-input-chip.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-input-chip.values());
    }
  }

  @include test.describe('md-comp-linear-progress-indicator.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-linear-progress-indicator.values());
    }
  }

  @include test.describe('md-comp-list.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-list.values());
    }
  }

  @include test.describe('md-comp-menu.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-menu.values());
    }
  }

  @include test.describe('md-comp-navigation-bar.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-navigation-bar.values());
    }
  }

  @include test.describe('md-comp-navigation-drawer.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-navigation-drawer.values());
    }
  }

  @include test.describe('md-comp-navigation-rail.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-navigation-rail.values());
    }
  }

  @include test.describe('md-comp-outlined-autocomplete.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-outlined-autocomplete.values());
    }
  }

  @include test.describe('md-comp-outlined-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-outlined-button.values());
    }
  }

  @include test.describe('md-comp-outlined-card.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-outlined-card.values());
    }
  }

  @include test.describe('md-comp-outlined-icon-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-outlined-icon-button.values());
    }
  }

  @include test.describe('md-comp-outlined-menu-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-outlined-menu-button.values());
    }
  }

  @include test.describe('md-comp-outlined-segmented-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-outlined-segmented-button.values());
    }
  }

  @include test.describe('md-comp-outlined-select.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-outlined-select.values());
    }
  }

  @include test.describe('md-comp-outlined-text-field.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-outlined-text-field.values());
    }
  }

  @include test.describe('md-comp-plain-tooltip.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-plain-tooltip.values());
    }
  }

  @include test.describe('md-comp-primary-navigation-tab.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-primary-navigation-tab.values());
    }
  }

  @include test.describe('md-comp-radio-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-radio-button.values());
    }
  }

  @include test.describe('md-comp-rich-tooltip.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-rich-tooltip.values());
    }
  }

  @include test.describe('md-comp-scrim.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-scrim.values());
    }
  }

  @include test.describe('md-comp-search-bar.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-search-bar.values());
    }
  }

  @include test.describe('md-comp-search-view.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-search-view.values());
    }
  }

  @include test.describe('md-comp-secondary-navigation-tab.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-secondary-navigation-tab.values());
    }
  }

  @include test.describe('md-comp-sheet-bottom.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-sheet-bottom.values());
    }
  }

  @include test.describe('md-comp-sheet-floating.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-sheet-floating.values());
    }
  }

  @include test.describe('md-comp-sheet-side.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-sheet-side.values());
    }
  }

  @include test.describe('md-comp-slider.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-slider.values());
    }
  }

  @include test.describe('md-comp-snackbar.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-snackbar.values());
    }
  }

  @include test.describe('md-comp-standard-menu-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-standard-menu-button.values());
    }
  }

  @include test.describe('md-comp-suggestion-chip.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-suggestion-chip.values());
    }
  }

  @include test.describe('md-comp-switch.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-switch.values());
    }
  }

  @include test.describe('md-comp-text-button.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-text-button.values());
    }
  }

  @include test.describe('md-comp-time-input.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-time-input.values());
    }
  }

  @include test.describe('md-comp-time-picker.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-time-picker.values());
    }
  }

  @include test.describe('md-comp-top-app-bar-large.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-top-app-bar-large.values());
    }
  }

  @include test.describe('md-comp-top-app-bar-medium.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-top-app-bar-medium.values());
    }
  }

  @include test.describe('md-comp-top-app-bar-small.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-top-app-bar-small.values());
    }
  }

  @include test.describe('md-comp-top-app-bar-small-centered.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-comp-top-app-bar-small-centered.values());
    }
  }

  @include test.describe('md-ref-palette.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-ref-palette.values());
    }
  }

  @include test.describe('md-ref-typeface.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-ref-typeface.values());
    }
  }

  @include test.describe('md-sys-color.values-dark') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-sys-color.values-dark());
    }
  }

  @include test.describe('md-sys-color.values-light') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-sys-color.values-light());
    }
  }

  @include test.describe('md-sys-elevation.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-sys-elevation.values());
    }
  }

  @include test.describe('md-sys-motion.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-sys-motion.values());
    }
  }

  @include test.describe('md-sys-shape.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-sys-shape.values());
    }
  }

  @include test.describe('md-sys-state.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-sys-state.values());
    }
  }

  @include test.describe('md-sys-typescale.values') {
    @include test.it('should return non-empty map') {
      @include test.assert-true(md-sys-typescale.values());
    }
  }
}
